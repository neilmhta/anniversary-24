{"ast":null,"code":"var _jsxFileName = \"/Users/neilmehta/Documents/vday-2024/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allCategories = [{\n  name: \"Animals\",\n  words: [\"Dog\", \"Cat\", \"Bird\", \"Fish\", \"Elephant\", \"Tiger\", \"Lion\", \"Monkey\"]\n}, {\n  name: \"Fruits\",\n  words: [\"Apple\", \"Banana\", \"Orange\", \"Grapes\", \"Strawberry\", \"Pineapple\", \"Watermelon\", \"Mango\"]\n}, {\n  name: \"Colors\",\n  words: [\"Red\", \"Blue\", \"Green\", \"Yellow\", \"Orange\", \"Purple\", \"Pink\", \"Black\"]\n}, {\n  name: \"Countries\",\n  words: [\"USA\", \"Canada\", \"Germany\", \"Japan\", \"France\", \"Brazil\", \"China\", \"Australia\"]\n}\n// Add more categories as needed\n];\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction NYTConnectionsGame() {\n  _s();\n  const [round, setRound] = useState(1);\n  const [selectedWords, setSelectedWords] = useState(Array(16).fill(false)); // Track selected words\n  const [currentCategories, setCurrentCategories] = useState([]);\n\n  // Define the categories for each round\n  const roundCategories = [[\"Animals\", \"Fruits\", \"Colors\", \"Countries\"], [\"Colors\", \"Animals\", \"Fruits\", \"Countries\"]\n  // Add more rounds and categories as needed\n  ];\n\n  // Function to generate categories for the current round\n  const generateCategories = () => {\n    const roundIndex = round - 1;\n    const selectedCategoryNames = roundCategories[roundIndex];\n    const selectedCategories = allCategories.filter(category => selectedCategoryNames.includes(category.name));\n    const words = selectedCategories.flatMap(category => category.words).slice(0, 16);\n    shuffleArray(words);\n    setCurrentCategories(words);\n    setSelectedWords(Array(16).fill(false)); // Reset selected words\n  };\n\n  // Function to handle word selection\n  const handleWordClick = index => {\n    const newSelectedWords = [...selectedWords];\n    newSelectedWords[index] = !newSelectedWords[index];\n    setSelectedWords(newSelectedWords);\n  };\n\n  // Function to check if the selection is correct\n  const checkSelection = () => {\n    const categoryResults = currentCategories.reduce((acc, curr, index) => {\n      const categoryIndex = Math.floor(index / 4);\n      if (!acc[categoryIndex]) {\n        acc[categoryIndex] = [];\n      }\n      acc[categoryIndex].push(selectedWords[index]);\n      return acc;\n    }, []);\n    const allCategoriesCorrect = categoryResults.every(words => words.filter(Boolean).length === 4);\n    if (allCategoriesCorrect) {\n      alert(\"Congratulations! You've completed all categories.\");\n      setRound(round + 1);\n    } else {\n      alert(\"Not all categories are completed. Please try again.\");\n    }\n  };\n  useEffect(() => {\n    generateCategories();\n  }, [round]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the NYT Connections-style game!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Round: \", round]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select the correct 4 words from each category to complete it.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(4, 1fr)',\n        gap: 20\n      },\n      children: currentCategories.map((word, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          cursor: 'pointer',\n          textDecoration: selectedWords[index] ? 'line-through' : 'none'\n        },\n        onClick: () => handleWordClick(index),\n        children: word\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkSelection,\n      children: \"Check Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(NYTConnectionsGame, \"z4O4jmFq2jNFBEjToczrGsHomE4=\");\n_c = NYTConnectionsGame;\nexport default NYTConnectionsGame;\nvar _c;\n$RefreshReg$(_c, \"NYTConnectionsGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","allCategories","name","words","shuffleArray","array","i","length","j","Math","floor","random","NYTConnectionsGame","_s","round","setRound","selectedWords","setSelectedWords","Array","fill","currentCategories","setCurrentCategories","roundCategories","generateCategories","roundIndex","selectedCategoryNames","selectedCategories","filter","category","includes","flatMap","slice","handleWordClick","index","newSelectedWords","checkSelection","categoryResults","reduce","acc","curr","categoryIndex","push","allCategoriesCorrect","every","Boolean","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","gap","map","word","cursor","textDecoration","onClick","_c","$RefreshReg$"],"sources":["/Users/neilmehta/Documents/vday-2024/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst allCategories = [\n  {\n    name: \"Animals\",\n    words: [\"Dog\", \"Cat\", \"Bird\", \"Fish\", \"Elephant\", \"Tiger\", \"Lion\", \"Monkey\"]\n  },\n  {\n    name: \"Fruits\",\n    words: [\"Apple\", \"Banana\", \"Orange\", \"Grapes\", \"Strawberry\", \"Pineapple\", \"Watermelon\", \"Mango\"]\n  },\n  {\n    name: \"Colors\",\n    words: [\"Red\", \"Blue\", \"Green\", \"Yellow\", \"Orange\", \"Purple\", \"Pink\", \"Black\"]\n  },\n  {\n    name: \"Countries\",\n    words: [\"USA\", \"Canada\", \"Germany\", \"Japan\", \"France\", \"Brazil\", \"China\", \"Australia\"]\n  }\n  // Add more categories as needed\n];\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nfunction NYTConnectionsGame() {\n  const [round, setRound] = useState(1);\n  const [selectedWords, setSelectedWords] = useState(Array(16).fill(false)); // Track selected words\n  const [currentCategories, setCurrentCategories] = useState([]);\n\n  // Define the categories for each round\n  const roundCategories = [\n    [\"Animals\", \"Fruits\", \"Colors\", \"Countries\"],\n    [\"Colors\", \"Animals\", \"Fruits\", \"Countries\"],\n    // Add more rounds and categories as needed\n  ];\n\n  // Function to generate categories for the current round\n  const generateCategories = () => {\n    const roundIndex = round - 1;\n    const selectedCategoryNames = roundCategories[roundIndex];\n    const selectedCategories = allCategories.filter(category => selectedCategoryNames.includes(category.name));\n    const words = selectedCategories.flatMap(category => category.words).slice(0, 16);\n    shuffleArray(words);\n    setCurrentCategories(words);\n    setSelectedWords(Array(16).fill(false)); // Reset selected words\n  };\n\n  // Function to handle word selection\n  const handleWordClick = (index) => {\n    const newSelectedWords = [...selectedWords];\n    newSelectedWords[index] = !newSelectedWords[index];\n    setSelectedWords(newSelectedWords);\n  };\n\n  // Function to check if the selection is correct\n  const checkSelection = () => {\n    const categoryResults = currentCategories.reduce((acc, curr, index) => {\n      const categoryIndex = Math.floor(index / 4);\n      if (!acc[categoryIndex]) {\n        acc[categoryIndex] = [];\n      }\n      acc[categoryIndex].push(selectedWords[index]);\n      return acc;\n    }, []);\n\n    const allCategoriesCorrect = categoryResults.every(words => words.filter(Boolean).length === 4);\n    if (allCategoriesCorrect) {\n      alert(\"Congratulations! You've completed all categories.\");\n      setRound(round + 1);\n    } else {\n      alert(\"Not all categories are completed. Please try again.\");\n    }\n  };\n\n  useEffect(() => {\n    generateCategories();\n  }, [round]);\n\n  return (\n    <div>\n      <h1>Welcome to the NYT Connections-style game!</h1>\n      <p>Round: {round}</p>\n      <p>Select the correct 4 words from each category to complete it.</p>\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: 20 }}>\n        {currentCategories.map((word, index) => (\n          <div key={index} style={{ cursor: 'pointer', textDecoration: selectedWords[index] ? 'line-through' : 'none' }} onClick={() => handleWordClick(index)}>{word}</div>\n        ))}\n      </div>\n      <button onClick={checkSelection}>Check Selection</button>\n    </div>\n  );\n}\n\nexport default NYTConnectionsGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}