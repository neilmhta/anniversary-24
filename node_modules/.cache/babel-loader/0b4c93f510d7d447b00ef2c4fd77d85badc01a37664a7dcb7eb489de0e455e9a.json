{"ast":null,"code":"var _jsxFileName = \"/Users/neilmehta/Documents/vday-2024/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allCategories = [{\n  name: \"Animals\",\n  words: [\"Dog\", \"Cat\", \"Bird\", \"Fish\", \"Elephant\", \"Tiger\", \"Lion\", \"Monkey\"]\n}, {\n  name: \"Fruits\",\n  words: [\"Apple\", \"Banana\", \"Orange\", \"Grapes\", \"Strawberry\", \"Pineapple\", \"Watermelon\", \"Mango\"]\n}, {\n  name: \"Colors\",\n  words: [\"Red\", \"Blue\", \"Green\", \"Yellow\", \"Orange\", \"Purple\", \"Pink\", \"Black\"]\n}, {\n  name: \"Countries\",\n  words: [\"USA\", \"Canada\", \"Germany\", \"Japan\", \"France\", \"Brazil\", \"China\", \"Australia\"]\n}\n// Add more categories as needed\n];\nfunction NYTConnectionsGame() {\n  _s();\n  const [round, setRound] = useState(1);\n  const [selectedWords, setSelectedWords] = useState(Array(16).fill(false)); // Track selected words\n  const [currentCategories, setCurrentCategories] = useState([]);\n\n  // Define the categories for each round\n  const roundCategories = [[\"Animals\", \"Fruits\", \"Colors\", \"Countries\"], [\"Colors\", \"Animals\", \"Fruits\", \"Countries\"]\n  // Add more rounds and categories as needed\n  ];\n\n  // Function to generate categories for the current round\n  const generateCategories = () => {\n    const roundIndex = round - 1;\n    const selectedCategoryNames = roundCategories[roundIndex];\n    const selectedCategories = allCategories.filter(category => selectedCategoryNames.includes(category.name));\n    setCurrentCategories(selectedCategories);\n    setSelectedWords(Array(16).fill(false)); // Reset selected words\n  };\n\n  // Function to handle word selection\n  const handleWordClick = index => {\n    const newSelectedWords = [...selectedWords];\n    newSelectedWords[index] = !newSelectedWords[index];\n    setSelectedWords(newSelectedWords);\n  };\n\n  // Function to check if the selection is correct\n  const checkSelection = () => {\n    const categoryResults = currentCategories.map(category => {\n      const selectedWordsInCategory = category.words.filter((_, index) => selectedWords[index]);\n      return selectedWordsInCategory.length === 4;\n    });\n    const allCategoriesCorrect = categoryResults.every(result => result);\n    if (allCategoriesCorrect) {\n      alert(\"Congratulations! You've completed all categories.\");\n      setRound(round + 1);\n    } else {\n      alert(\"Not all categories are completed. Please try again.\");\n    }\n  };\n  useEffect(() => {\n    generateCategories();\n  }, [round]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the NYT Connections-style game!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Round: \", round]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select the correct 4 words from each category to complete it.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap'\n      },\n      children: currentCategories.map((category, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginRight: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: category.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: category.words.map((word, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              cursor: 'pointer',\n              textDecoration: selectedWords[i] ? 'line-through' : 'none'\n            },\n            onClick: () => handleWordClick(i),\n            children: word\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkSelection,\n      children: \"Check Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(NYTConnectionsGame, \"z4O4jmFq2jNFBEjToczrGsHomE4=\");\n_c = NYTConnectionsGame;\nexport default NYTConnectionsGame;\nvar _c;\n$RefreshReg$(_c, \"NYTConnectionsGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","allCategories","name","words","NYTConnectionsGame","_s","round","setRound","selectedWords","setSelectedWords","Array","fill","currentCategories","setCurrentCategories","roundCategories","generateCategories","roundIndex","selectedCategoryNames","selectedCategories","filter","category","includes","handleWordClick","index","newSelectedWords","checkSelection","categoryResults","map","selectedWordsInCategory","_","length","allCategoriesCorrect","every","result","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexWrap","marginRight","word","i","cursor","textDecoration","onClick","_c","$RefreshReg$"],"sources":["/Users/neilmehta/Documents/vday-2024/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst allCategories = [\n  {\n    name: \"Animals\",\n    words: [\"Dog\", \"Cat\", \"Bird\", \"Fish\", \"Elephant\", \"Tiger\", \"Lion\", \"Monkey\"]\n  },\n  {\n    name: \"Fruits\",\n    words: [\"Apple\", \"Banana\", \"Orange\", \"Grapes\", \"Strawberry\", \"Pineapple\", \"Watermelon\", \"Mango\"]\n  },\n  {\n    name: \"Colors\",\n    words: [\"Red\", \"Blue\", \"Green\", \"Yellow\", \"Orange\", \"Purple\", \"Pink\", \"Black\"]\n  },\n  {\n    name: \"Countries\",\n    words: [\"USA\", \"Canada\", \"Germany\", \"Japan\", \"France\", \"Brazil\", \"China\", \"Australia\"]\n  }\n  // Add more categories as needed\n];\n\nfunction NYTConnectionsGame() {\n  const [round, setRound] = useState(1);\n  const [selectedWords, setSelectedWords] = useState(Array(16).fill(false)); // Track selected words\n  const [currentCategories, setCurrentCategories] = useState([]);\n\n  // Define the categories for each round\n  const roundCategories = [\n    [\"Animals\", \"Fruits\", \"Colors\", \"Countries\"],\n    [\"Colors\", \"Animals\", \"Fruits\", \"Countries\"],\n    // Add more rounds and categories as needed\n  ];\n\n  // Function to generate categories for the current round\n  const generateCategories = () => {\n    const roundIndex = round - 1;\n    const selectedCategoryNames = roundCategories[roundIndex];\n    const selectedCategories = allCategories.filter(category => selectedCategoryNames.includes(category.name));\n    setCurrentCategories(selectedCategories);\n    setSelectedWords(Array(16).fill(false)); // Reset selected words\n  };\n\n  // Function to handle word selection\n  const handleWordClick = (index) => {\n    const newSelectedWords = [...selectedWords];\n    newSelectedWords[index] = !newSelectedWords[index];\n    setSelectedWords(newSelectedWords);\n  };\n\n  // Function to check if the selection is correct\n  const checkSelection = () => {\n    const categoryResults = currentCategories.map(category => {\n      const selectedWordsInCategory = category.words.filter((_, index) => selectedWords[index]);\n      return selectedWordsInCategory.length === 4;\n    });\n    const allCategoriesCorrect = categoryResults.every(result => result);\n    if (allCategoriesCorrect) {\n      alert(\"Congratulations! You've completed all categories.\");\n      setRound(round + 1);\n    } else {\n      alert(\"Not all categories are completed. Please try again.\");\n    }\n  };\n\n  useEffect(() => {\n    generateCategories();\n  }, [round]);\n\n  return (\n    <div>\n      <h1>Welcome to the NYT Connections-style game!</h1>\n      <p>Round: {round}</p>\n      <p>Select the correct 4 words from each category to complete it.</p>\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        {currentCategories.map((category, index) => (\n          <div key={index} style={{ marginRight: 20 }}>\n            <h3>{category.name}</h3>\n            <ul>\n              {category.words.map((word, i) => (\n                <li key={i} style={{ cursor: 'pointer', textDecoration: selectedWords[i] ? 'line-through' : 'none' }} onClick={() => handleWordClick(i)}>{word}</li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n      <button onClick={checkSelection}>Check Selection</button>\n    </div>\n  );\n}\n\nexport default NYTConnectionsGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}