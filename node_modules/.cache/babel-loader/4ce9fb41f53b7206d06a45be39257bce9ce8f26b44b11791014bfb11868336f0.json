{"ast":null,"code":"var _jsxFileName = \"/Users/neilmehta/Documents/vday-2024/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allCategories = [{\n  name: \"Animals\",\n  words: [\"Dog\", \"Cat\", \"Bird\", \"Fish\", \"Elephant\", \"Tiger\", \"Lion\", \"Monkey\"]\n}, {\n  name: \"Fruits\",\n  words: [\"Apple\", \"Banana\", \"Orange\", \"Grapes\", \"Strawberry\", \"Pineapple\", \"Watermelon\", \"Mango\"]\n}, {\n  name: \"Colors\",\n  words: [\"Red\", \"Blue\", \"Green\", \"Yellow\", \"Orange\", \"Purple\", \"Pink\", \"Black\"]\n}, {\n  name: \"Countries\",\n  words: [\"USA\", \"Canada\", \"Germany\", \"Japan\", \"France\", \"Brazil\", \"China\", \"Australia\"]\n}\n// Add more categories as needed\n];\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction NYTConnectionsGame() {\n  _s();\n  const [round, setRound] = useState(1);\n  const [selectedWords, setSelectedWords] = useState(Array(16).fill(false)); // Track selected words\n  const [currentCategories, setCurrentCategories] = useState([]);\n  const [guessedCategories, setGuessedCategories] = useState([]);\n\n  // Define the categories for each round\n  const roundCategories = [[\"Animals\", \"Fruits\", \"Colors\", \"Countries\"], [\"Colors\", \"Animals\", \"Fruits\", \"Countries\"]\n  // Add more rounds and categories as needed\n  ];\n\n  // Function to generate categories for the current round\n  const generateCategories = () => {\n    const roundIndex = round - 1;\n    const selectedCategoryNames = roundCategories[roundIndex];\n    const selectedCategories = allCategories.filter(category => selectedCategoryNames.includes(category.name));\n    const words = selectedCategories.flatMap(category => category.words).slice(0, 16);\n    shuffleArray(words);\n    setCurrentCategories(words);\n    setSelectedWords(Array(16).fill(false)); // Reset selected words\n    setGuessedCategories([]);\n  };\n\n  // Function to handle word selection\n  const handleWordClick = index => {\n    const newSelectedWords = [...selectedWords];\n    newSelectedWords[index] = !newSelectedWords[index];\n    setSelectedWords(newSelectedWords);\n  };\n\n  // Function to check if the selection is correct\n  const checkSelection = () => {\n    const categoryResults = currentCategories.reduce((acc, curr, index) => {\n      const categoryIndex = Math.floor(index / 4);\n      if (!acc[categoryIndex]) {\n        acc[categoryIndex] = [];\n      }\n      acc[categoryIndex].push(selectedWords[index]);\n      return acc;\n    }, []);\n    const correctCategories = categoryResults.map(words => words.filter(Boolean).length === 4);\n    const allCategoriesCorrect = correctCategories.every(correct => correct);\n    if (allCategoriesCorrect) {\n      alert(\"Congratulations! You've completed all categories.\");\n      setRound(round + 1);\n    } else {\n      // Check individual category completion\n      const completedCategories = correctCategories.map((correct, index) => {\n        if (correct && !guessedCategories.includes(currentCategories[index * 4])) {\n          return currentCategories[index * 4];\n        }\n        return null;\n      }).filter(Boolean);\n      if (completedCategories.length > 0) {\n        setGuessedCategories([...guessedCategories, ...completedCategories]);\n      }\n      alert(\"Not all categories are completed. Please try again.\");\n    }\n  };\n  useEffect(() => {\n    generateCategories();\n  }, [round]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the NYT Connections-style game!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Round: \", round]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select the correct 4 words from each category to complete it.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(4, 1fr)',\n        gap: 20\n      },\n      children: currentCategories.map((category, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          cursor: 'pointer',\n          textDecoration: selectedWords[index] ? 'line-through' : 'none',\n          backgroundColor: guessedCategories.includes(category) ? 'lightgreen' : ''\n        },\n        onClick: () => handleWordClick(index),\n        children: category\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: checkSelection,\n      children: \"Check Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(NYTConnectionsGame, \"Ho/PGZtN4GXWTGYgrGhkdrpHu/0=\");\n_c = NYTConnectionsGame;\nexport default NYTConnectionsGame;\nvar _c;\n$RefreshReg$(_c, \"NYTConnectionsGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","allCategories","name","words","shuffleArray","array","i","length","j","Math","floor","random","NYTConnectionsGame","_s","round","setRound","selectedWords","setSelectedWords","Array","fill","currentCategories","setCurrentCategories","guessedCategories","setGuessedCategories","roundCategories","generateCategories","roundIndex","selectedCategoryNames","selectedCategories","filter","category","includes","flatMap","slice","handleWordClick","index","newSelectedWords","checkSelection","categoryResults","reduce","acc","curr","categoryIndex","push","correctCategories","map","Boolean","allCategoriesCorrect","every","correct","alert","completedCategories","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","gap","cursor","textDecoration","backgroundColor","onClick","_c","$RefreshReg$"],"sources":["/Users/neilmehta/Documents/vday-2024/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst allCategories = [\n  {\n    name: \"Animals\",\n    words: [\"Dog\", \"Cat\", \"Bird\", \"Fish\", \"Elephant\", \"Tiger\", \"Lion\", \"Monkey\"]\n  },\n  {\n    name: \"Fruits\",\n    words: [\"Apple\", \"Banana\", \"Orange\", \"Grapes\", \"Strawberry\", \"Pineapple\", \"Watermelon\", \"Mango\"]\n  },\n  {\n    name: \"Colors\",\n    words: [\"Red\", \"Blue\", \"Green\", \"Yellow\", \"Orange\", \"Purple\", \"Pink\", \"Black\"]\n  },\n  {\n    name: \"Countries\",\n    words: [\"USA\", \"Canada\", \"Germany\", \"Japan\", \"France\", \"Brazil\", \"China\", \"Australia\"]\n  }\n  // Add more categories as needed\n];\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nfunction NYTConnectionsGame() {\n  const [round, setRound] = useState(1);\n  const [selectedWords, setSelectedWords] = useState(Array(16).fill(false)); // Track selected words\n  const [currentCategories, setCurrentCategories] = useState([]);\n  const [guessedCategories, setGuessedCategories] = useState([]);\n\n  // Define the categories for each round\n  const roundCategories = [\n    [\"Animals\", \"Fruits\", \"Colors\", \"Countries\"],\n    [\"Colors\", \"Animals\", \"Fruits\", \"Countries\"],\n    // Add more rounds and categories as needed\n  ];\n\n  // Function to generate categories for the current round\n  const generateCategories = () => {\n    const roundIndex = round - 1;\n    const selectedCategoryNames = roundCategories[roundIndex];\n    const selectedCategories = allCategories.filter(category => selectedCategoryNames.includes(category.name));\n    const words = selectedCategories.flatMap(category => category.words).slice(0, 16);\n    shuffleArray(words);\n    setCurrentCategories(words);\n    setSelectedWords(Array(16).fill(false)); // Reset selected words\n    setGuessedCategories([]);\n  };\n\n  // Function to handle word selection\n  const handleWordClick = (index) => {\n    const newSelectedWords = [...selectedWords];\n    newSelectedWords[index] = !newSelectedWords[index];\n    setSelectedWords(newSelectedWords);\n  };\n\n  // Function to check if the selection is correct\n  const checkSelection = () => {\n    const categoryResults = currentCategories.reduce((acc, curr, index) => {\n      const categoryIndex = Math.floor(index / 4);\n      if (!acc[categoryIndex]) {\n        acc[categoryIndex] = [];\n      }\n      acc[categoryIndex].push(selectedWords[index]);\n      return acc;\n    }, []);\n\n    const correctCategories = categoryResults.map(words => words.filter(Boolean).length === 4);\n    const allCategoriesCorrect = correctCategories.every(correct => correct);\n\n    if (allCategoriesCorrect) {\n      alert(\"Congratulations! You've completed all categories.\");\n      setRound(round + 1);\n    } else {\n      // Check individual category completion\n      const completedCategories = correctCategories.map((correct, index) => {\n        if (correct && !guessedCategories.includes(currentCategories[index * 4])) {\n          return currentCategories[index * 4];\n        }\n        return null;\n      }).filter(Boolean);\n\n      if (completedCategories.length > 0) {\n        setGuessedCategories([...guessedCategories, ...completedCategories]);\n      }\n\n      alert(\"Not all categories are completed. Please try again.\");\n    }\n  };\n\n  useEffect(() => {\n    generateCategories();\n  }, [round]);\n\n  return (\n    <div>\n      <h1>Welcome to the NYT Connections-style game!</h1>\n      <p>Round: {round}</p>\n      <p>Select the correct 4 words from each category to complete it.</p>\n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: 20 }}>\n        {currentCategories.map((category, index) => (\n          <div key={index} style={{ cursor: 'pointer', textDecoration: selectedWords[index] ? 'line-through' : 'none', backgroundColor: guessedCategories.includes(category) ? 'lightgreen' : '' }} onClick={() => handleWordClick(index)}>{category}</div>\n        ))}\n      </div>\n      <button onClick={checkSelection}>Check Selection</button>\n    </div>\n  );\n}\n\nexport default NYTConnectionsGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}